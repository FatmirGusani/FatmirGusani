package com.packt.B05688.chapter7;
import java.io.ByteArrayInputStream;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.videoio.VideoCapture;
import org.opencv.videoio.Videoio;

public class SecurityCamera extends Application {

	static {
	System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
}
private boolean isStart = false;
private VideoCapture capture;
private ScheduledExecutorService timer;

private BorderPane root;
private VBox vboxCenter;

private ImageView frame;
private HBox hboxBottom;
private Button videoButton, exitButton;

@Override
public void start(Stage primaryStage) {

initGui();

capture = new VideoCapture();

exitButton.setOnAction((ActionEvent event) -> {
System.exit(0);
});

videoButton.setOnAction((ActionEvent event) -> {

if (!isStart) {
frame.setFitWidth(640);
frame.setFitHeight(480);
frame.setPreserveRatio(true);

capture.open(0);
capture.set(Videoio.CAP_PROP_FRAME_WIDTH, 640);
capture.set(Videoio.CAP_PROP_FRAME_HEIGHT, 480);

if (capture.isOpened()) {
isStart = true;

Runnable frameGrabber = new Runnable() {

@Override
public void run() {
Image imageToShow = grabFrame();
frame.setImage(imageToShow);
}
};

timer = Executors.newSingleThreadScheduledExecutor();
timer.scheduleAtFixedRate(frameGrabber,
0, 33, TimeUnit.MILLISECONDS);

	videoButton.setText("Stop");
}
else {
System.err.println("Open camera error!");
}
}

else {
isStart = false;
videoButton.setText("Start");

	try {
	timer.shutdown();
timer.awaitTermination(33, TimeUnit.MILLISECONDS);
}
catch (InterruptedException e) {
System.err.println(e);
}

capture.release();
frame.setImage(null);
}
});

Scene scene = new Scene(root, 800, 640);
primaryStage.setTitle("Pixel Demo 01");
primaryStage.setScene(scene);
primaryStage.show();
}

private Image grabFrame() {
Image result = null;
Mat image = new Mat();

if (capture.isOpened()) {
	capture.read(image);
	
if (!image.empty()) {
result = mat2Image(".png", image);
}
}

return result;
}

public static Image mat2Image(String ext, Mat image) {
MatOfByte buffer = new MatOfByte();
Imgcodecs.imencode(ext, image, buffer);
return new Image(newByteArrayInputStream(buffer.toArray()));
}

private void initGui() {
root = new BorderPane();

vboxCenter = new VBox();
vboxCenter.setAlignment(Pos.CENTER);
vboxCenter.setPadding(new Insets(5, 5, 5, 5));
	frame = new ImageView();
vboxCenter.getChildren().addAll(frame);
root.setCenter(vboxCenter);

hboxBottom = new HBox();
hboxBottom.setAlignment(Pos.CENTER);
hboxBottom.setPadding(new Insets(5, 5, 5, 5));
videoButton = new Button("Start");
exitButton = new Button("Exit");
hboxBottom.getChildren().addAll(videoButton,
	exitButton);
root.setBottom(hboxBottom);
}

public static void main(String[] args) {
launch(args);
}

}













































